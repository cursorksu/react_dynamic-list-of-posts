{"version":3,"sources":["utils/api.ts","utils/constants.ts","components/PostItem.tsx","components/PostList.tsx","components/SearchField.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","response","ok","Error","statusText","json","catch","error","postsPromise","usersPromise","commentsPromise","getCorrectPosts","Promise","all","then","posts","users","comments","map","post","user","find","id","userId","postComments","filter","comment","postId","PostItem","body","title","className","name","key","email","PostList","SearchField","setValue","searchingValue","htmlFor","type","value","onChange","placeholder","App","useState","setPosts","isLoading","setIsLoading","query","setQuery","filterQuery","setFilterQuery","setError","visiblePosts","useMemo","includes","toLocaleLowerCase","setFilterQueryWithDebounce","useCallback","debounce","length","onClick","postsList","toString","finally","event","target","ReactDOM","render","document","getElementById"],"mappings":"2SAQMA,EAAO,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACSC,MCTD,uCDSkBF,GAD1B,WACRG,EADQ,QAGAC,GAHA,sBAIN,IAAIC,MAAMF,EAASG,YAJb,gCAOPH,EAASI,OACbC,OAAM,SAAAC,GAAK,OAAIA,MARJ,2CAAH,sDAYPC,EAAgCX,EClBb,UDmBnBY,EAAgCZ,EClBb,UDmBnBa,EAAsCb,EClBhB,aDoBfc,EAAkBC,QAAQC,IAAI,CACzCL,EACAC,EACAC,IAECI,MAAK,YAA+B,IAAD,mBAA5BC,EAA4B,KAArBC,EAAqB,KAAdC,EAAc,KAClC,OAAOF,EAAMG,KAAI,SAACC,GAAD,sBACZA,EADY,CAEfC,KAAMJ,EACHK,MAAK,SAAAD,GAAI,OAAIA,EAAKE,KAAOH,EAAKI,UACjCC,aAAcP,EACXQ,QAAO,SAAAC,GAAO,OAAIA,EAAQC,SAAWR,EAAKG,cE7BtCM,EAAsB,SAAC,GAAc,IAAZT,EAAW,EAAXA,KAElCG,EAKEH,EALFG,GACAF,EAIED,EAJFC,KACAS,EAGEV,EAHFU,KACAC,EAEEX,EAFFW,MACAN,EACEL,EADFK,aAGF,OACE,4BACE,yBAAKO,UAAU,kCACb,yBAAKA,UAAU,eACb,yCAAWT,IACX,wBAAIS,UAAU,cAAcX,EAAKY,OAEnC,yBAAKD,UAAU,aACb,wBAAIA,UAAU,cAAcD,GAC5B,uBAAGC,UAAU,aAAaF,GAC1B,wBAAIE,UAAU,YACXP,EAAaN,KAAI,SAAAQ,GAAO,OACvB,wBAAIO,IAAG,iBAAYP,EAAQJ,KACzB,yBAAKS,UAAU,eACb,0BAAMA,UAAU,gBAAgBL,EAAQM,MACxC,6BACA,0BAAMD,UAAU,kBAAkBL,EAAQQ,QAE5C,2BAAIR,EAAQG,eC1BfM,EAAsB,SAAC,GAAe,IAAbpB,EAAY,EAAZA,MACpC,OACE,wBAAIgB,UAAU,SACXhB,EAAMG,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CAAUc,IAAKd,EAAKG,GAAIH,KAAMA,SCHzBiB,EAAyB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,eACjD,OACE,0BAAMP,UAAU,QACd,yBAAKA,UAAU,cACb,2BAAOQ,QAAQ,UAAf,yCAEE,2BACEC,KAAK,OACLT,UAAU,eACVU,MAAOH,EACPI,SAAUL,EACVf,GAAG,SACHqB,YAAY,qBCqETC,G,YA9EC,WAAO,IAAD,EACMC,mBAAwB,IAD9B,mBACb9B,EADa,KACN+B,EADM,OAEcD,oBAAS,GAFvB,mBAEbE,EAFa,KAEFC,EAFE,OAGMH,mBAAS,IAHf,mBAGbI,EAHa,KAGNC,EAHM,OAIkBL,mBAAS,IAJ3B,mBAIbM,EAJa,KAIAC,EAJA,OAKMP,mBAAS,IALf,mBAKbtC,EALa,KAKN8C,EALM,KAgBdC,EAAeC,mBACnB,kBAAMxC,EACHU,QAAO,YAAsB,IAAnBK,EAAkB,EAAlBA,MAAOD,EAAW,EAAXA,KAChB,OACEC,EAAM0B,SAASL,EAAYM,sBACxB5B,EAAK2B,SAASL,EAAYM,0BAGnC,CAACN,EAAapC,IAGV2C,EAA6BC,sBACjCC,IAASR,EAAgB,KACzB,IAUF,OACE,0BAAMrB,UAAU,aACd,wBAAIA,UAAU,qBAAd,yBAIkB,IAAjBhB,EAAM8C,QACL,4BACErB,KAAK,SACLT,UAAU,gCACV+B,QA1CW,WACjBd,GAAa,GAEbrC,EAAgBG,MAAK,SAAAiD,GACnBjB,EAASiB,MACRzD,OAAM,SAAAC,GAAK,OAAI8C,EAAS9C,EAAMyD,eAC9BC,SAAQ,kBAAMjB,GAAa,QAsCvBD,EAAY,aAAe,QAI/BxC,GACC,yBAAKwB,UAAU,yCACb,sEAEIxB,EAFJ,iEAQc,IAAjBQ,EAAM8C,QACL,oCACE,kBAAC,EAAD,CACExB,SApCW,SAAC6B,GAA0C,IACtDzB,EAAUyB,EAAMC,OAAhB1B,MAERS,EAAST,GACTiB,EAA2BjB,IAiCnBH,eAAgBW,IAElB,kBAAC,EAAD,CAAUlC,MAAOuC,QC7E3Bc,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.588c28b9.chunk.js","sourcesContent":["import {\n  BASE_URL,\n  POSTS_URL,\n  USERS_URL,\n  COMMENTS_URL,\n} from './constants';\n\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(BASE_URL + url);\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n\n  return response.json()\n    .catch(error => error);\n};\n\n\nconst postsPromise: Promise<Post[]> = getData<Post[]>(POSTS_URL);\nconst usersPromise: Promise<User[]> = getData<User[]>(USERS_URL);\nconst commentsPromise: Promise<Comment[]> = getData<Comment[]>(COMMENTS_URL);\n\nexport const getCorrectPosts = Promise.all([\n  postsPromise,\n  usersPromise,\n  commentsPromise,\n])\n  .then(([posts, users, comments]) => {\n    return posts.map((post) => ({\n      ...post,\n      user: users\n        .find(user => user.id === post.userId) as User,\n      postComments: comments\n        .filter(comment => comment.postId === post.id) as Comment[],\n    }));\n  });\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const POSTS_URL = '/posts';\nexport const USERS_URL = '/users';\nexport const COMMENTS_URL = '/comments';\n","import React, { FC } from 'react';\n\ninterface Props {\n  post: CorrectPost;\n}\n\nexport const PostItem: FC<Props> = ({ post }) => {\n  const {\n    id,\n    user,\n    body,\n    title,\n    postComments,\n  } = post;\n\n  return (\n    <li>\n      <div className=\"card border-secondary mb-3 row\">\n        <div className=\"card-header\">\n          <span>{`#${id}`}</span>\n          <h6 className=\"card-title\">{user.name}</h6>\n        </div>\n        <div className=\"card-body\">\n          <h4 className=\"card-title\">{title}</h4>\n          <p className=\"card-text\">{body}</p>\n          <ul className=\"comments\">\n            {postComments.map(comment => (\n              <li key={`comment${comment.id}`}>\n                <div className=\"card-header\">\n                  <span className=\"text-primary\">{comment.name}</span>\n                  <br />\n                  <span className=\"text-secondary\">{comment.email}</span>\n                </div>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </li>\n  );\n};\n","import React, { FC } from 'react';\nimport { PostItem } from './PostItem';\n\ninterface Props {\n  posts: CorrectPost[];\n}\n\nexport const PostList: FC<Props> = ({ posts }) => {\n  return (\n    <ul className=\"posts\">\n      {posts.map(post => (\n        <PostItem key={post.id} post={post} />\n      ))}\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  setValue(event: React.ChangeEvent<HTMLInputElement>): void;\n  searchingValue: string;\n}\n\n\nexport const SearchField: FC<Props> = ({ setValue, searchingValue }) => {\n  return (\n    <form className=\"form\">\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">\n          Search post by title or by description\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            value={searchingValue}\n            onChange={setValue}\n            id=\"search\"\n            placeholder=\"put someth..\"\n          />\n        </label>\n      </div>\n    </form>\n  );\n};\n","import React, {\n  FC, useState, useMemo, useCallback, ChangeEvent,\n} from 'react';\nimport debounce from 'lodash/debounce';\nimport { getCorrectPosts } from './utils/api';\nimport { PostList } from './components/PostList';\nimport { SearchField } from './components/SearchField';\nimport 'bootswatch/dist/materia/bootstrap.min.css';\n\nimport './App.css';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<CorrectPost[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filterQuery, setFilterQuery] = useState('');\n  const [error, setError] = useState('');\n\n  const handleLoad = () => {\n    setIsLoading(true);\n\n    getCorrectPosts.then(postsList => {\n      setPosts(postsList);\n    }).catch(error => setError(error.toString()))\n      .finally(() => setIsLoading(false));\n  };\n\n  const visiblePosts = useMemo(\n    () => posts\n      .filter(({ title, body }) => {\n        return (\n          title.includes(filterQuery.toLocaleLowerCase())\n          || body.includes(filterQuery.toLocaleLowerCase())\n        );\n      }),\n    [filterQuery, posts],\n  );\n\n  const setFilterQueryWithDebounce = useCallback(\n    debounce(setFilterQuery, 1000),\n    [],\n  );\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n    setFilterQueryWithDebounce(value);\n  };\n\n  return (\n    <main className=\"container\">\n      <h1 className=\"text-center title\">\n        Dynamic list of posts\n      </h1>\n\n      {posts.length === 0 && (\n        <button\n          type=\"button\"\n          className=\"button-load btn btn-secondary\"\n          onClick={handleLoad}\n        >\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      )}\n\n      {error && (\n        <div className=\"alert alert-dismissible alert-warning\">\n          <span>\n            {`Server responded\n            ${error}\n            Check your internet connection and try again.`}\n          </span>\n        </div>\n      )}\n\n      {posts.length !== 0 && (\n        <>\n          <SearchField\n            setValue={handleChange}\n            searchingValue={query}\n          />\n          <PostList posts={visiblePosts} />\n        </>\n      )}\n    </main>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}